<?php

/**
 * @file
 * Install, update and uninstall functions for the S3 File System module.
 */

/**
 * Implements hook_requirements().
 */
function s3filesystem_requirements($phase) {

  $t = \drupal::translation();

  if ($phase != 'runtime') {
    return array();
  }

  if (ini_get('allow_url_fopen')) {
    $requirements['s3filesystem_allow_url_fopen'] = array(
      'severity' => REQUIREMENT_OK,
      'title'    => $t->translate('allow_url_fopen'),
      'value'    => $t->translate('Enabled'),
    );
  }
  else {
    $requirements['s3filesystem_allow_url_fopen'] = array(
      'severity'    => REQUIREMENT_ERROR,
      'title'       => $t->translate('allow_url_fopen'),
      'value'       => $t->translate('Disabled'),
      'description' => $t->translate('The S3 File System module requires that the allow_url_fopen setting be turned on in php.ini.'),
    );
  }

  if (PHP_INT_SIZE === 8) {
    $requirements['s3filesystem_int64'] = array(
      'title'    => $t->translate('PHP architecture'),
      'value'    => $t->translate('64-bit'),
      'severity' => REQUIREMENT_OK,
    );
  }
  else {
    $requirements['s3filesystem_int64'] = array(
      'title'       => $t->translate('PHP architecture'),
      'value'       => $t->translate('32-bit'),
      'description' => $t->translate('A 64-bit PHP installation is required in order to support files larger than 2GB.'),
      'severity'    => REQUIREMENT_WARNING,
    );
  }

  if (class_exists('\Aws\S3\S3Client')) {
    $requirements['s3filesystem_awssdk2'] = array(
      'title'    => $t->translate('AWS SDK for PHP 2'),
      'value'    => $t->translate('Installed.'),
      'severity' => REQUIREMENT_OK,
    );
  }
  else {
    $requirements['s3filesystem_awssdk2'] = array(
      'title'       => $t->translate('AWS SDK for PHP 2'),
      'value'       => $t->translate('The S3 File System module requires the AWS SDK for PHP 2 library.'),
      'description' => $t->translate('The Libraries module reported the following error: <br>
        Please check the installation instructions for S3 File System.'),
      'severity'    => REQUIREMENT_ERROR,
    );
  }

  // Report the version number of S3 File System on the system status page.
  $requirements['s3filesystem_version'] = array(
    'title'    => $t->translate('S3 File System'),
    'value'    => S3FILESYSTEM_VERSION,
    'severity' => REQUIREMENT_OK,
  );

  return $requirements;
}

/**
 * Implements hook_uninstall().
 *
 * @see hook_uninstall()
 */
function s3filesystem_uninstall() {

}

/**
 * Implements hook_schema().
 */
function s3filesystem_schema() {
  $schema = array();

  $schema['file_s3filesystem'] = array(
    'description' => 'Stores metadata about files in the S3 File System.',
    'fields'      => array(
      'fid'       => array(
        'description' => 'The S3 ID.',
        'type'        => 'serial',
        'not null'    => TRUE,
      ),
      'uri'       => array(
        'description' => 'The S3 URI of the file.',
        'type'        => 'varchar',
        'length'      => 255,
        'not null'    => TRUE,
      ),
      'stat'  => array(
        'description' => 'Serialized stat array',
        'type'        => 'blob',
        'size'        => 'normal',
        'not null'    => TRUE,
      ),
      'expires' => array(
        'description' => 'UNIX timestamp for when the cache expires.',
        'type'        => 'int',
        'unsigned'    => TRUE,
        'not null'    => TRUE,
        'default'     => 0,
      ),
    ),
    'indexes'     => array(
      'uri' => array('uri'),
    ),
    'primary key' => array('fid'),
    'collation'   => 'utf8_bin',
  );

  return $schema;
}

/**
 * Implements hook_install().
 *
 * Because hook_schema() doesn't respect the 'collation' setting, we have to
 * set the collation manually. This hook is run after the table is created.
 */
function s3filesystem_install() {
  // As stated here: http://forums.mysql.com/read.php?103,19380,200971#msg-200971
  // MySQL doesn't directly support case sensitive UTF8 collation. Fortunately,
  // 'utf8_bin' collation fulfills our needs.
  db_query("ALTER TABLE {file_s3filesystem} CONVERT TO CHARACTER SET utf8 COLLATE utf8_bin");
}

/**
 * Updates to use AWS Caching rather than custom caching tables
 */
function s3filesystem_update_8001(&$sandbox) {

  $database = \Drupal::database();
  $schema = $database->schema();

  $database->query('TRUNCATE {file_s3filesystem}');

  $spec = array(
    'description' => 'Serialized stat array',
    'type'        => 'blob',
    'size'        => 'normal',
    'not null'    => TRUE,
  );
  $schema->addField('file_s3filesystem', 'stat', $spec);

  $spec = array(
    'description' => 'UNIX timestamp for when the cache expires.',
    'type'        => 'int',
    'unsigned'    => TRUE,
    'not null'    => TRUE,
    'default'     => 0,
  );
  $schema->addField('file_s3filesystem', 'expires', $spec);

  $schema->dropIndex('file_s3filesystem', 'timestamp');
  $schema->dropField('file_s3filesystem', 'filesize');
  $schema->dropField('file_s3filesystem', 'timestamp');
  $schema->dropField('file_s3filesystem', 'dir');
}
